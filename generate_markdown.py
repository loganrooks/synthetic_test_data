import os
from .common import MD_DIR

def create_md_basic_elements(filename="all_basic_elements.md"):
    """
    Creates a Markdown file showcasing basic formatting elements.
    """
    filepath = os.path.join(MD_DIR, "basic", filename)
    
    content = """---
title: Basic Markdown Elements
author: Synthetic Data Generator
date: 2025-05-09
tags: [markdown, test, basic]
custom_field: SomeValue
---
# Header 1: The Nature of Synthesis
This document serves as a basic test for Markdown parsing.
## Header 2: Elements of Style
We explore *italicized text* for emphasis, and **bold text** for strong importance. 
Sometimes, we might use `inline code` for technical terms or snippets.
### Header 3: Lists and Organization
An unordered list:
- Item Alpha: The first principle.
- Item Beta: The second consideration.
  - Nested Item Beta.1: A sub-point.
  - Nested Item Beta.2: Another sub-point.
- Item Gamma: The final thought in this list.
An ordered list:
1. First step: Define requirements.
2. Second step: Generate synthetic data.
   1. Sub-step 2.1: Create EPUBs.
   2. Sub-step 2.2: Create PDFs.
   3. Sub-step 2.3: Create Markdown files.
3. Third step: Test the system.
### Header 3: Links and Images
A link to a [philosophical resource](https://plato.stanford.edu/).
An image placeholder (actual image file not generated by this script):
![Placeholder image of a classical bust](images/placeholder_bust.jpg)
---
> "The only true wisdom is in knowing you know nothing." 
> - Socrates (attributed)
This is a blockquote, often used for quotations or highlighted text.
"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_extended_elements(filename="extended_elements.md"):
    """
    Creates a Markdown file with tables, footnotes, task lists, and code blocks.
    Uses TOML frontmatter.
    """
    filepath = os.path.join(MD_DIR, "extended", filename)
    
    content = """+++
title = "Extended Markdown Showcase"
author = "Synthetic Data Generator"
date = "2025-05-09"
category = "synthetic"
draft = false
description = "A test file for advanced Markdown features."
+++
# Extended Markdown Features
This document demonstrates more complex Markdown elements.
## Tables
A simple table:
| Philosopher | Key Idea             | Era      |
|-------------|----------------------|----------|
| Plato       | Theory of Forms      | Ancient  |
| Kant        | Categorical Imperative | Modern   |
| Nietzsche   | Will to Power        | Modern   |
A table with different alignments:
| Left Align  | Center Align | Right Align |
|:------------|:------------:|------------:|
| Col 3 is    | some wordy   |        $1600 |
| Col 2 is    | centered     |          $12 |
| zebra stripes | are neat   |           $1 |
## Footnotes
Here is some text with a footnote.[^1] And another one.[^2]
[^1]: This is the first footnote. It can contain **bold** and *italic* text.
[^2]: This is the second footnote. It might link to [another resource](https://example.com).
## Task Lists
- [x] Define requirements for synthetic data
- [ ] Generate EPUB files
  - [ ] Simple NCX
  - [ ] Nested NCX
- [ ] Generate PDF files
- [ ] Generate Markdown files
  - [x] Basic elements
  - [ ] Extended elements (this one!)
## Code Blocks
Python code block:
```python
def greet(name):
    print(f"Hello, {name}!")
greet("Philosopher")
```
JSON code block:
```json
{
  "concept": "Synthetic Data",
  "purpose": "Testing",
  "formats": ["EPUB", "PDF", "Markdown"]
}
```
Indented code block:

    // This is an indented code block
    // Often used for simpler snippets.
    function example() {
        return true;
    }
## Horizontal Rules
---
***
___
These are different ways to create horizontal rules.
"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_json_frontmatter(filename="json_frontmatter.md"):
    """
    Creates a Markdown file with JSON frontmatter.
    """
    filepath = os.path.join(MD_DIR, "frontmatter", filename)
    
    content = """{
  "title": "JSON Frontmatter Test",
  "author": "Synthetic Data Generator",
  "date": "2025-05-10",
  "tags": ["markdown", "json", "frontmatter"],
  "data": {
    "version": 1.2,
    "active": true,
    "keywords": null
  }
}

# Document with JSON Frontmatter

This document uses JSON for its frontmatter section. 
While less common than YAML or TOML for Markdown, some systems might support it.

The content itself is straightforward, focusing on the parsability of the JSON block.
"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_error_frontmatter(filename="error_frontmatter.md"):
    """
    Creates a Markdown file with syntactically incorrect YAML frontmatter.
    """
    filepath = os.path.join(MD_DIR, "frontmatter", filename)
    
    content = """---
title: Erroneous Frontmatter
author: Synthetic Data Generator
date: 2025-05-10
tags: [markdown, error
description: This frontmatter has an unclosed list and a missing colon.
another_field value_without_colon
---

# Document with Faulty Frontmatter

The YAML frontmatter above contains intentional syntax errors.
This is to test how parsers handle malformed metadata sections.
They might ignore it, raise an error, or attempt partial parsing.
"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_no_frontmatter(filename="no_frontmatter.md"):
    """
    Creates a Markdown file with no frontmatter at all.
    """
    filepath = os.path.join(MD_DIR, "frontmatter", filename)
    
    content = """# Document Without Frontmatter

This Markdown document begins directly with content, omitting any frontmatter section.
This tests the system's ability to process files that lack formal metadata blocks. 
It should rely on content-based extraction or default values if metadata is expected.

The philosophical implications of absence are themselves quite profound. What is defined by what is not there?
"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_with_embedded_html(filename="embedded_html.md"):
    """
    Creates a Markdown file with embedded HTML, both simple and complex/malformed.
    """
    filepath = os.path.join(MD_DIR, "general_edge_cases", filename)
    
    content = """# Markdown with Embedded HTML

This document tests the handling of HTML embedded within Markdown.

## Simple Embedded HTML
Here is some **bold Markdown text** followed by simple &lt;b&gt;bold HTML text&lt;/b&gt;.
And here is &lt;em&gt;italic HTML text&lt;/em&gt; mixed with *italic Markdown*.

A simple div:
&lt;div style="color: blue; border: 1px solid green; padding: 5px;"&gt;
  This is a div with inline styles. It contains &lt;strong&gt;strong HTML&lt;/strong&gt; text.
&lt;/div&gt;

## Complex or Malformed Embedded HTML
This section includes HTML that might be more challenging for parsers.

An unclosed HTML tag:
&lt;p&gt;This paragraph starts, but the tag is not closed.
What happens to the subsequent Markdown?

A table created with HTML:
&lt;table border="1"&gt;
  &lt;tr&gt;&lt;th&gt;HTML Header 1&lt;/th&gt;&lt;th&gt;HTML Header 2&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Data A1&lt;/td&gt;&lt;td&gt;Data B1&lt;/td&gt;&lt;/tr&gt;
  &lt;tr&gt;&lt;td&gt;Data A2&lt;/td&gt;&lt;td&gt;Data B2&lt;/td&gt;
&lt;/table&gt;

Markdown after the HTML table:
- List item 1
- List item 2

A malformed tag: &lt;div class="test" id=unquoted_id&gt;Content of malformed div.&lt;/div class="mismatch"&gt;

This tests whether the parser correctly identifies and handles (or ignores/passes through) these HTML blocks.
"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")

def create_md_with_latex(filename="with_latex.md"):
    """
    Creates a Markdown file with embedded LaTeX expressions.
    """
    filepath = os.path.join(MD_DIR, "general_edge_cases", filename)
    
    content = """# Markdown with LaTeX Expressions

This document includes mathematical and logical expressions formatted using LaTeX.

## Inline LaTeX
An important equation is $E = mc^2$. This is an inline LaTeX expression.
We can also write logical symbols like $\\forall x \\exists y (P(x) \\rightarrow Q(y))$.
The sum $\\sum_{i=1}^{n} i = \\frac{n(n+1)}{2}$ is a well-known formula.

## Display LaTeX (Block)
For more complex expressions, display mode is used:
$$
\\int_0^\\infty e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}
$$

Another example:
$$
\\mathcal{L}(\\theta | x) = f(x | \\theta)
$$

This tests the system's ability to recognize and potentially process or preserve these LaTeX blocks, 
which are common in scientific and philosophical texts.
"""
    try:
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, 'w', encoding='utf-8') as f: f.write(content)
        print(f"Successfully created Markdown: {filepath}")
    except Exception as e: print(f"Error creating Markdown {filepath}: {e}")
# Placeholder for more Markdown generation functions
# def create_md_json_frontmatter(...):
#   pass